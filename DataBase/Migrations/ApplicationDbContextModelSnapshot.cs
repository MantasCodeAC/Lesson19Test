// <auto-generated />
using System;
using Lesson19Test.DataBase.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Lesson19Test.DataBase.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Lesson19Test.DataBase.Model.DatabaseModels.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("Lesson19Test.DataBase.Model.DatabaseModels.Image", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Data")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("Lesson19Test.DataBase.Model.DatabaseModels.ImageAndNote", b =>
                {
                    b.Property<Guid>("NoteId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ImageId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("NoteId", "ImageId");

                    b.HasIndex("ImageId");

                    b.ToTable("ImageAndNote");
                });

            modelBuilder.Entity("Lesson19Test.DataBase.Model.DatabaseModels.Note", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Notes");
                });

            modelBuilder.Entity("Lesson19Test.DataBase.Model.DatabaseModels.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Lesson19Test.DataBase.Model.DatabaseModels.Category", b =>
                {
                    b.HasOne("Lesson19Test.DataBase.Model.DatabaseModels.User", null)
                        .WithMany("categories")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Lesson19Test.DataBase.Model.DatabaseModels.ImageAndNote", b =>
                {
                    b.HasOne("Lesson19Test.DataBase.Model.DatabaseModels.Image", "Image")
                        .WithMany("ImageAndNote")
                        .HasForeignKey("ImageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Lesson19Test.DataBase.Model.DatabaseModels.Note", "Note")
                        .WithMany("ImageAndNote")
                        .HasForeignKey("NoteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Image");

                    b.Navigation("Note");
                });

            modelBuilder.Entity("Lesson19Test.DataBase.Model.DatabaseModels.Note", b =>
                {
                    b.HasOne("Lesson19Test.DataBase.Model.DatabaseModels.Category", null)
                        .WithMany("Notes")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Lesson19Test.DataBase.Model.DatabaseModels.Category", b =>
                {
                    b.Navigation("Notes");
                });

            modelBuilder.Entity("Lesson19Test.DataBase.Model.DatabaseModels.Image", b =>
                {
                    b.Navigation("ImageAndNote");
                });

            modelBuilder.Entity("Lesson19Test.DataBase.Model.DatabaseModels.Note", b =>
                {
                    b.Navigation("ImageAndNote");
                });

            modelBuilder.Entity("Lesson19Test.DataBase.Model.DatabaseModels.User", b =>
                {
                    b.Navigation("categories");
                });
#pragma warning restore 612, 618
        }
    }
}
